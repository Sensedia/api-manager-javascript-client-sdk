/**
 * API Manager Portal
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiManagerPortal);
  }
}(this, function(expect, ApiManagerPortal) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiManagerPortal.API();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('API', function() {
    it('should create an instance of API', function() {
      // uncomment below and update the code to test API
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be.a(ApiManagerPortal.API);
    });

    it('should have the property accessTokenExpiresIn (base name: "accessTokenExpiresIn")', function() {
      // uncomment below and update the code to test the property accessTokenExpiresIn
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property appsCount (base name: "appsCount")', function() {
      // uncomment below and update the code to test the property appsCount
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property basePath (base name: "basePath")', function() {
      // uncomment below and update the code to test the property basePath
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property creationDate (base name: "creationDate")', function() {
      // uncomment below and update the code to test the property creationDate
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property environments (base name: "environments")', function() {
      // uncomment below and update the code to test the property environments
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property icon (base name: "icon")', function() {
      // uncomment below and update the code to test the property icon
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property lastRevision (base name: "lastRevision")', function() {
      // uncomment below and update the code to test the property lastRevision
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property lastVersion (base name: "lastVersion")', function() {
      // uncomment below and update the code to test the property lastVersion
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property parentId (base name: "parentId")', function() {
      // uncomment below and update the code to test the property parentId
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property plans (base name: "plans")', function() {
      // uncomment below and update the code to test the property plans
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property privateAPI (base name: "privateAPI")', function() {
      // uncomment below and update the code to test the property privateAPI
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property releaseNotes (base name: "releaseNotes")', function() {
      // uncomment below and update the code to test the property releaseNotes
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property revisions (base name: "revisions")', function() {
      // uncomment below and update the code to test the property revisions
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property teamVisibility (base name: "teamVisibility")', function() {
      // uncomment below and update the code to test the property teamVisibility
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property users (base name: "users")', function() {
      // uncomment below and update the code to test the property users
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

    it('should have the property visibilityType (base name: "visibilityType")', function() {
      // uncomment below and update the code to test the property visibilityType
      //var instane = new ApiManagerPortal.API();
      //expect(instance).to.be();
    });

  });

}));
