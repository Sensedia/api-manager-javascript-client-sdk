/**
 * API Manager Portal
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiManagerPortal);
  }
}(this, function(expect, ApiManagerPortal) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiManagerPortal.Call();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Call', function() {
    it('should create an instance of Call', function() {
      // uncomment below and update the code to test Call
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be.a(ApiManagerPortal.Call);
    });

    it('should have the property accessToken (base name: "accessToken")', function() {
      // uncomment below and update the code to test the property accessToken
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property accessTokenOwner (base name: "accessTokenOwner")', function() {
      // uncomment below and update the code to test the property accessTokenOwner
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property additionalData (base name: "additionalData")', function() {
      // uncomment below and update the code to test the property additionalData
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property apiComponentType (base name: "apiComponentType")', function() {
      // uncomment below and update the code to test the property apiComponentType
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property apiId (base name: "apiId")', function() {
      // uncomment below and update the code to test the property apiId
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property apiName (base name: "apiName")', function() {
      // uncomment below and update the code to test the property apiName
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property appDeveloper (base name: "appDeveloper")', function() {
      // uncomment below and update the code to test the property appDeveloper
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property appName (base name: "appName")', function() {
      // uncomment below and update the code to test the property appName
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property appToken (base name: "appToken")', function() {
      // uncomment below and update the code to test the property appToken
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property authOwner (base name: "authOwner")', function() {
      // uncomment below and update the code to test the property authOwner
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property baseUrl (base name: "baseUrl")', function() {
      // uncomment below and update the code to test the property baseUrl
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property billing (base name: "billing")', function() {
      // uncomment below and update the code to test the property billing
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property cache (base name: "cache")', function() {
      // uncomment below and update the code to test the property cache
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property callDate (base name: "callDate")', function() {
      // uncomment below and update the code to test the property callDate
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property callerAddress (base name: "callerAddress")', function() {
      // uncomment below and update the code to test the property callerAddress
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property clientId (base name: "clientId")', function() {
      // uncomment below and update the code to test the property clientId
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property completeUrl (base name: "completeUrl")', function() {
      // uncomment below and update the code to test the property completeUrl
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property durationMillis (base name: "durationMillis")', function() {
      // uncomment below and update the code to test the property durationMillis
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property environmentId (base name: "environmentId")', function() {
      // uncomment below and update the code to test the property environmentId
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property environmentName (base name: "environmentName")', function() {
      // uncomment below and update the code to test the property environmentName
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property gatewayDurationMillis (base name: "gatewayDurationMillis")', function() {
      // uncomment below and update the code to test the property gatewayDurationMillis
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property httpStatus (base name: "httpStatus")', function() {
      // uncomment below and update the code to test the property httpStatus
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property insertedOnDate (base name: "insertedOnDate")', function() {
      // uncomment below and update the code to test the property insertedOnDate
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property method (base name: "method")', function() {
      // uncomment below and update the code to test the property method
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property operationId (base name: "operationId")', function() {
      // uncomment below and update the code to test the property operationId
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property operationName (base name: "operationName")', function() {
      // uncomment below and update the code to test the property operationName
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property receivedFromAddress (base name: "receivedFromAddress")', function() {
      // uncomment below and update the code to test the property receivedFromAddress
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property receivedOn (base name: "receivedOn")', function() {
      // uncomment below and update the code to test the property receivedOn
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property receivedOnDate (base name: "receivedOnDate")', function() {
      // uncomment below and update the code to test the property receivedOnDate
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property redis (base name: "redis")', function() {
      // uncomment below and update the code to test the property redis
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property requestHeaders (base name: "requestHeaders")', function() {
      // uncomment below and update the code to test the property requestHeaders
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property requestID (base name: "requestID")', function() {
      // uncomment below and update the code to test the property requestID
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property requestPayload (base name: "requestPayload")', function() {
      // uncomment below and update the code to test the property requestPayload
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property resourceId (base name: "resourceId")', function() {
      // uncomment below and update the code to test the property resourceId
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property resourceName (base name: "resourceName")', function() {
      // uncomment below and update the code to test the property resourceName
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property responseHeaders (base name: "responseHeaders")', function() {
      // uncomment below and update the code to test the property responseHeaders
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property responsePayload (base name: "responsePayload")', function() {
      // uncomment below and update the code to test the property responsePayload
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property resultStatus (base name: "resultStatus")', function() {
      // uncomment below and update the code to test the property resultStatus
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property revisionId (base name: "revisionId")', function() {
      // uncomment below and update the code to test the property revisionId
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property trace (base name: "trace")', function() {
      // uncomment below and update the code to test the property trace
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property transactionID (base name: "transactionID")', function() {
      // uncomment below and update the code to test the property transactionID
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property typeError (base name: "typeError")', function() {
      // uncomment below and update the code to test the property typeError
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property typeStatus (base name: "typeStatus")', function() {
      // uncomment below and update the code to test the property typeStatus
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property uri (base name: "uri")', function() {
      // uncomment below and update the code to test the property uri
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

    it('should have the property yearMonth (base name: "yearMonth")', function() {
      // uncomment below and update the code to test the property yearMonth
      //var instane = new ApiManagerPortal.Call();
      //expect(instance).to.be();
    });

  });

}));
