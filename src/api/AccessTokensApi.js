/**
 * API Manager Portal
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessToken', 'model/AccessTokenResponse', 'model/ChangeLogBean'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccessToken'), require('../model/AccessTokenResponse'), require('../model/ChangeLogBean'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiManagerPortal) {
      root.ApiManagerPortal = {};
    }
    root.ApiManagerPortal.AccessTokensApi = factory(root.ApiManagerPortal.ApiClient, root.ApiManagerPortal.AccessToken, root.ApiManagerPortal.AccessTokenResponse, root.ApiManagerPortal.ChangeLogBean);
  }
}(this, function(ApiClient, AccessToken, AccessTokenResponse, ChangeLogBean) {
  'use strict';

  /**
   * AccessTokens service.
   * @module api/AccessTokensApi
   * @version 2.0
   */

  /**
   * Constructs a new AccessTokensApi. 
   * @alias module:api/AccessTokensApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the countUsingGET10 operation.
     * @callback module:api/AccessTokensApi~countUsingGET10Callback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve access token total
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/AccessTokensApi~countUsingGET10Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.countUsingGET10 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/access-tokens/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAuthTokenUsingDELETE1 operation.
     * @callback module:api/AccessTokensApi~removeAuthTokenUsingDELETE1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a access token
     * @param {String} id App id
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/AccessTokensApi~removeAuthTokenUsingDELETE1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeAuthTokenUsingDELETE1 = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeAuthTokenUsingDELETE1");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/access-tokens/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAuthTokenChangeLogUsingGET1 operation.
     * @callback module:api/AccessTokensApi~retrieveAuthTokenChangeLogUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChangeLogBean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrive changelog per access token id
     * @param {Number} id Access token id
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/AccessTokensApi~retrieveAuthTokenChangeLogUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChangeLogBean>}
     */
    this.retrieveAuthTokenChangeLogUsingGET1 = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveAuthTokenChangeLogUsingGET1");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [ChangeLogBean];

      return this.apiClient.callApi(
        '/access-tokens/{id}/changelog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retriveAuthTokenByCodeUsingGET1 operation.
     * @callback module:api/AccessTokensApi~retriveAuthTokenByCodeUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find access token by code
     * @param {String} code Code
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/AccessTokensApi~retriveAuthTokenByCodeUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessToken}
     */
    this.retriveAuthTokenByCodeUsingGET1 = function(code, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling retriveAuthTokenByCodeUsingGET1");
      }


      var pathParams = {
        'code': code
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AccessToken;

      return this.apiClient.callApi(
        '/access-tokens/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retriveAuthTokenUsingGET1 operation.
     * @callback module:api/AccessTokensApi~retriveAuthTokenUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessToken>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find access token list by filters
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {String} opts.code code
     * @param {String} opts.owner owner
     * @param {String} opts.status staus(ACTIVE, REVOKED, EXPIRED)
     * @param {Number} opts.expiresIn Expires in millisecond
     * @param {String} opts.refreshToken Refresh code
     * @param {String} opts.scope Scope
     * @param {String} opts.keyword Keyword to find between code or owner
     * @param {Number} opts.actualPage Number of the page in pagination. The starting page number is zero.
     * @param {Number} opts.pageSize Define the size of the returned list of developers.
     * @param {String} opts.authIds Id access token separated by space. Ex:(1 3 6 8)
     * @param {String} opts.beginDate Begin date
     * @param {String} opts.endDate End date
     * @param {String} opts.extraFields Extra field separated by comma
     * @param {module:api/AccessTokensApi~retriveAuthTokenUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessToken>}
     */
    this.retriveAuthTokenUsingGET1 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'code': opts['code'],
        'owner': opts['owner'],
        'status': opts['status'],
        'expiresIn': opts['expiresIn'],
        'refreshToken': opts['refreshToken'],
        'scope': opts['scope'],
        'keyword': opts['keyword'],
        'actualPage': opts['actualPage'],
        'pageSize': opts['pageSize'],
        'authIds': opts['authIds'],
        'beginDate': opts['beginDate'],
        'endDate': opts['endDate'],
        'extraFields': opts['extraFields']
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AccessToken];

      return this.apiClient.callApi(
        '/access-tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAuthTokenUsingPOST1 operation.
     * @callback module:api/AccessTokensApi~saveAuthTokenUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:model/AccessToken} opts.bean Access token json to create a new access token.
     * @param {module:api/AccessTokensApi~saveAuthTokenUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessToken}
     */
    this.saveAuthTokenUsingPOST1 = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['bean'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccessToken;

      return this.apiClient.callApi(
        '/access-tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAuthTokenUsingPUT1 operation.
     * @callback module:api/AccessTokensApi~updateAuthTokenUsingPUT1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a access token
     * @param {String} id Access token id
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:model/AccessToken} opts.bean Access token json to update a access token.
     * @param {module:api/AccessTokensApi~updateAuthTokenUsingPUT1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessTokenResponse}
     */
    this.updateAuthTokenUsingPUT1 = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['bean'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAuthTokenUsingPUT1");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AccessTokenResponse;

      return this.apiClient.callApi(
        '/access-tokens/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the validatePartialAccessTokenUsingPOST1 operation.
     * @callback module:api/AccessTokensApi~validatePartialAccessTokenUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate partial access token
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:model/AccessToken} opts.bean Access token json to validate a access token.
     * @param {module:api/AccessTokensApi~validatePartialAccessTokenUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.validatePartialAccessTokenUsingPOST1 = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['bean'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/access-tokens/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
