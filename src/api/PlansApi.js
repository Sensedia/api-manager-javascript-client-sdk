/**
 * API Manager Portal
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ChangeLogBean', 'model/PlanResponse', 'model/ResponseEntity'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ChangeLogBean'), require('../model/PlanResponse'), require('../model/ResponseEntity'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiManagerPortal) {
      root.ApiManagerPortal = {};
    }
    root.ApiManagerPortal.PlansApi = factory(root.ApiManagerPortal.ApiClient, root.ApiManagerPortal.ChangeLogBean, root.ApiManagerPortal.PlanResponse, root.ApiManagerPortal.ResponseEntity);
  }
}(this, function(ApiClient, ChangeLogBean, PlanResponse, ResponseEntity) {
  'use strict';

  /**
   * Plans service.
   * @module api/PlansApi
   * @version 2.0
   */

  /**
   * Constructs a new PlansApi. 
   * @alias module:api/PlansApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the clonePlanUsingPOST1 operation.
     * @callback module:api/PlansApi~clonePlanUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone a plan
     * @param {String} id Plan id
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/PlansApi~clonePlanUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlanResponse}
     */
    this.clonePlanUsingPOST1 = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling clonePlanUsingPOST1");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PlanResponse;

      return this.apiClient.callApi(
        '/plans/{id}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the countUsingGET13 operation.
     * @callback module:api/PlansApi~countUsingGET13Callback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve plan total
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/PlansApi~countUsingGET13Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.countUsingGET13 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/plans/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePlanUsingDELETE1 operation.
     * @callback module:api/PlansApi~deletePlanUsingDELETE1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a plan
     * @param {String} id Plan id
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/PlansApi~deletePlanUsingDELETE1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntity}
     */
    this.deletePlanUsingDELETE1 = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePlanUsingDELETE1");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResponseEntity;

      return this.apiClient.callApi(
        '/plans/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlanChangeLogUsingGET3 operation.
     * @callback module:api/PlansApi~getPlanChangeLogUsingGET3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChangeLogBean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrive changelog per plan id
     * @param {Number} id id
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/PlansApi~getPlanChangeLogUsingGET3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChangeLogBean>}
     */
    this.getPlanChangeLogUsingGET3 = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPlanChangeLogUsingGET3");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ChangeLogBean];

      return this.apiClient.callApi(
        '/plans/{id}/changelog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlanDefaultByApiUsingGET1 operation.
     * @callback module:api/PlansApi~getPlanDefaultByApiUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find default plan by api id
     * @param {String} id Api id
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/PlansApi~getPlanDefaultByApiUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlanResponse}
     */
    this.getPlanDefaultByApiUsingGET1 = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPlanDefaultByApiUsingGET1");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PlanResponse;

      return this.apiClient.callApi(
        '/plans/{id}/defaultPlan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlanUsingGET2 operation.
     * @callback module:api/PlansApi~getPlanUsingGET2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find plan by id
     * @param {String} id id
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/PlansApi~getPlanUsingGET2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlanResponse}
     */
    this.getPlanUsingGET2 = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPlanUsingGET2");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PlanResponse;

      return this.apiClient.callApi(
        '/plans/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlanUsingGET3 operation.
     * @callback module:api/PlansApi~getPlanUsingGET3Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PlanResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all plan
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/PlansApi~getPlanUsingGET3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PlanResponse>}
     */
    this.getPlanUsingGET3 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PlanResponse];

      return this.apiClient.callApi(
        '/plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postPlanUsingPOST1 operation.
     * @callback module:api/PlansApi~postPlanUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new plan
     * @param {module:model/PlanResponse} planBean planBean
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/PlansApi~postPlanUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlanResponse}
     */
    this.postPlanUsingPOST1 = function(planBean, opts, callback) {
      opts = opts || {};
      var postBody = planBean;

      // verify the required parameter 'planBean' is set
      if (planBean === undefined || planBean === null) {
        throw new Error("Missing the required parameter 'planBean' when calling postPlanUsingPOST1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = PlanResponse;

      return this.apiClient.callApi(
        '/plans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putPlanUsingPUT1 operation.
     * @callback module:api/PlansApi~putPlanUsingPUT1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a plan
     * @param {String} id Plan id
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:model/PlanResponse} opts.planBean Plan json to update a plan
     * @param {module:api/PlansApi~putPlanUsingPUT1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlanResponse}
     */
    this.putPlanUsingPUT1 = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['planBean'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putPlanUsingPUT1");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PlanResponse;

      return this.apiClient.callApi(
        '/plans/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the validatePartialPlanUsingPOST1 operation.
     * @callback module:api/PlansApi~validatePartialPlanUsingPOST1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate partial a plan
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:model/PlanResponse} opts.planBean Plan json to validate a plan
     * @param {module:api/PlansApi~validatePartialPlanUsingPOST1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseEntity}
     */
    this.validatePartialPlanUsingPOST1 = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['planBean'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = ResponseEntity;

      return this.apiClient.callApi(
        '/plans/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
