/**
 * API Manager Portal
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ChangeLogBean', 'model/Developer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ChangeLogBean'), require('../model/Developer'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiManagerPortal) {
      root.ApiManagerPortal = {};
    }
    root.ApiManagerPortal.DevelopersApi = factory(root.ApiManagerPortal.ApiClient, root.ApiManagerPortal.ChangeLogBean, root.ApiManagerPortal.Developer);
  }
}(this, function(ApiClient, ChangeLogBean, Developer) {
  'use strict';

  /**
   * Developers service.
   * @module api/DevelopersApi
   * @version 2.0
   */

  /**
   * Constructs a new DevelopersApi. 
   * @alias module:api/DevelopersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the countUsingGET12 operation.
     * @callback module:api/DevelopersApi~countUsingGET12Callback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve developers total
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/DevelopersApi~countUsingGET12Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.countUsingGET12 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/developers/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createOrUpdateDeveloper1 operation.
     * @callback module:api/DevelopersApi~createOrUpdateDeveloper1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Developer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update developer
     * @param {String} login Developer Login
     * @param {module:model/Developer} bean bean
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/DevelopersApi~createOrUpdateDeveloper1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Developer}
     */
    this.createOrUpdateDeveloper1 = function(login, bean, opts, callback) {
      opts = opts || {};
      var postBody = bean;

      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling createOrUpdateDeveloper1");
      }

      // verify the required parameter 'bean' is set
      if (bean === undefined || bean === null) {
        throw new Error("Missing the required parameter 'bean' when calling createOrUpdateDeveloper1");
      }


      var pathParams = {
        'login': login
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Developer;

      return this.apiClient.callApi(
        '/developers/{login}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUserAccountUsingDELETE1 operation.
     * @callback module:api/DevelopersApi~removeUserAccountUsingDELETE1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete developer
     * @param {String} login Developer Login
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/DevelopersApi~removeUserAccountUsingDELETE1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeUserAccountUsingDELETE1 = function(login, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling removeUserAccountUsingDELETE1");
      }


      var pathParams = {
        'login': login
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/developers/{login}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retieveUserAccountUsingGET1 operation.
     * @callback module:api/DevelopersApi~retieveUserAccountUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Developer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrive developer per Login
     * @param {String} login Developer Login
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/DevelopersApi~retieveUserAccountUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Developer}
     */
    this.retieveUserAccountUsingGET1 = function(login, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'login' is set
      if (login === undefined || login === null) {
        throw new Error("Missing the required parameter 'login' when calling retieveUserAccountUsingGET1");
      }


      var pathParams = {
        'login': login
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Developer;

      return this.apiClient.callApi(
        '/developers/{login}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveAccountChangeLogUsingGET1 operation.
     * @callback module:api/DevelopersApi~retrieveAccountChangeLogUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChangeLogBean>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrive audit developer per username
     * @param {String} username Developer username
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/DevelopersApi~retrieveAccountChangeLogUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChangeLogBean>}
     */
    this.retrieveAccountChangeLogUsingGET1 = function(username, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling retrieveAccountChangeLogUsingGET1");
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ChangeLogBean];

      return this.apiClient.callApi(
        '/developers/{username}/changelog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveUserAccountsUsingGET1 operation.
     * @callback module:api/DevelopersApi~retrieveUserAccountsUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Developer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrive developers
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {String} opts.loginOrEmail Login or E-mail
     * @param {String} opts.name Developer Name
     * @param {String} opts.email Developer E-mail
     * @param {Number} opts.actualPage Number of the page in pagination. The starting page number is zero.
     * @param {Number} opts.pageSize Define the size of the returned list of developers.
     * @param {module:api/DevelopersApi~retrieveUserAccountsUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Developer>}
     */
    this.retrieveUserAccountsUsingGET1 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'loginOrEmail': opts['loginOrEmail'],
        'name': opts['name'],
        'email': opts['email'],
        'actualPage': opts['actualPage'],
        'pageSize': opts['pageSize']
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [Developer];

      return this.apiClient.callApi(
        '/developers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
