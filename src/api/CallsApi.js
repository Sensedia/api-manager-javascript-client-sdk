/**
 * API Manager Portal
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Call', 'model/CallResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Call'), require('../model/CallResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.ApiManagerPortal) {
      root.ApiManagerPortal = {};
    }
    root.ApiManagerPortal.CallsApi = factory(root.ApiManagerPortal.ApiClient, root.ApiManagerPortal.Call, root.ApiManagerPortal.CallResponse);
  }
}(this, function(ApiClient, Call, CallResponse) {
  'use strict';

  /**
   * Calls service.
   * @module api/CallsApi
   * @version 2.0
   */

  /**
   * Constructs a new CallsApi. 
   * @alias module:api/CallsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the retrieveCallByIdUsingGET1 operation.
     * @callback module:api/CallsApi~retrieveCallByIdUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Call} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrive call by id
     * @param {String} id Call id
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {module:api/CallsApi~retrieveCallByIdUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Call}
     */
    this.retrieveCallByIdUsingGET1 = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling retrieveCallByIdUsingGET1");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Call;

      return this.apiClient.callApi(
        '/calls/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveCallsWithFiltersUsingGET1 operation.
     * @callback module:api/CallsApi~retrieveCallsWithFiltersUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CallResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrive calls with filters
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {Number} opts.actualPage Number of the page in pagination. The starting page number is zero.
     * @param {String} opts.baseUris Base uris
     * @param {String} opts.appTokenCode Code app token
     * @param {Number} opts.pageSize Define the size of the returned list of developers.
     * @param {String} opts.appTokenName Name app token
     * @param {String} opts.authTokenOwner Owner auth token
     * @param {Number} opts.apiId API id
     * @param {Number} opts.operationId Operation id
     * @param {Number} opts.resourceId Resource id
     * @param {Number} opts.environmentId Environment id
     * @param {Number} opts.revisionId Revision id
     * @param {String} opts.uri URI
     * @param {String} opts.customSearch Custom search
     * @param {String} opts.method HTTP Method (GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD)
     * @param {Number} opts.httpStatusFrom HTTP status from
     * @param {Number} opts.httpStatusTo HTTP status to
     * @param {String} opts.beginDate Begin date
     * @param {String} opts.endDate End date
     * @param {String} opts.appDeveloper APP Developer
     * @param {String} opts.forceDownload Force archive download
     * @param {module:api/CallsApi~retrieveCallsWithFiltersUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CallResponse}
     */
    this.retrieveCallsWithFiltersUsingGET1 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'actualPage': opts['actualPage'],
        'baseUris': opts['baseUris'],
        'appTokenCode': opts['appTokenCode'],
        'pageSize': opts['pageSize'],
        'appTokenName': opts['appTokenName'],
        'authTokenOwner': opts['authTokenOwner'],
        'apiId': opts['apiId'],
        'operationId': opts['operationId'],
        'resourceId': opts['resourceId'],
        'environmentId': opts['environmentId'],
        'revisionId': opts['revisionId'],
        'uri': opts['uri'],
        'customSearch': opts['customSearch'],
        'method': opts['method'],
        'httpStatusFrom': opts['httpStatusFrom'],
        'httpStatusTo': opts['httpStatusTo'],
        'beginDate': opts['beginDate'],
        'endDate': opts['endDate'],
        'appDeveloper': opts['appDeveloper'],
        'forceDownload': opts['forceDownload']
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = CallResponse;

      return this.apiClient.callApi(
        '/calls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveTotalCallsByDateUsingGET1 operation.
     * @callback module:api/CallsApi~retrieveTotalCallsByDateUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrive calls total by date
     * @param {String} _date Date searched
     * @param {Object} opts Optional parameters
     * @param {String} opts.sensediaAuth Sensedia-Auth
     * @param {Number} opts.apiId API id
     * @param {module:api/CallsApi~retrieveTotalCallsByDateUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.retrieveTotalCallsByDateUsingGET1 = function(_date, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling retrieveTotalCallsByDateUsingGET1");
      }


      var pathParams = {
        'date': _date
      };
      var queryParams = {
        'apiId': opts['apiId']
      };
      var headerParams = {
        'Sensedia-Auth': opts['sensediaAuth']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/calls/count/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
