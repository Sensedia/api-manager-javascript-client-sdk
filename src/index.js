/**
 * API Manager Portal
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/API', 'model/APIComponentSimpleBean', 'model/APICreateBean', 'model/APIResponse', 'model/APISimpleBean', 'model/APIUserBean', 'model/APP', 'model/APPResponse', 'model/AccessToken', 'model/AccessTokenResponse', 'model/AppTokenSimpleBean', 'model/AuthTokenSimpleBean', 'model/CacheMetric', 'model/CacheMetricItem', 'model/Call', 'model/CallResponse', 'model/CallsMetric', 'model/ChangeLog', 'model/ChangeLogBean', 'model/DeploymentBean', 'model/DeploymentScheduleBean', 'model/DeploymentSimpleBean', 'model/Developer', 'model/EnvironmentSimpleBean', 'model/EvironmentUserBean', 'model/InterceptorBean', 'model/InterceptorReferenceBean', 'model/LatencyMetric', 'model/OperationBean', 'model/OperationHealth', 'model/OperationMetric', 'model/OperationUrlBean', 'model/PlanResponse', 'model/PlanSimpleBean', 'model/ResourceBean', 'model/ResponseEntity', 'model/RevisionBean', 'model/RevisionSimpleBean', 'model/RoleBean', 'model/RolePermissionBean', 'model/TeamBean', 'model/TokensMetric', 'model/TopAccessToken', 'model/TopApp', 'model/UserBean', 'api/APIsApi', 'api/AccessTokensApi', 'api/AppsApi', 'api/CallsApi', 'api/DevelopersApi', 'api/MetricsApi', 'api/PlansApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/API'), require('./model/APIComponentSimpleBean'), require('./model/APICreateBean'), require('./model/APIResponse'), require('./model/APISimpleBean'), require('./model/APIUserBean'), require('./model/APP'), require('./model/APPResponse'), require('./model/AccessToken'), require('./model/AccessTokenResponse'), require('./model/AppTokenSimpleBean'), require('./model/AuthTokenSimpleBean'), require('./model/CacheMetric'), require('./model/CacheMetricItem'), require('./model/Call'), require('./model/CallResponse'), require('./model/CallsMetric'), require('./model/ChangeLog'), require('./model/ChangeLogBean'), require('./model/DeploymentBean'), require('./model/DeploymentScheduleBean'), require('./model/DeploymentSimpleBean'), require('./model/Developer'), require('./model/EnvironmentSimpleBean'), require('./model/EvironmentUserBean'), require('./model/InterceptorBean'), require('./model/InterceptorReferenceBean'), require('./model/LatencyMetric'), require('./model/OperationBean'), require('./model/OperationHealth'), require('./model/OperationMetric'), require('./model/OperationUrlBean'), require('./model/PlanResponse'), require('./model/PlanSimpleBean'), require('./model/ResourceBean'), require('./model/ResponseEntity'), require('./model/RevisionBean'), require('./model/RevisionSimpleBean'), require('./model/RoleBean'), require('./model/RolePermissionBean'), require('./model/TeamBean'), require('./model/TokensMetric'), require('./model/TopAccessToken'), require('./model/TopApp'), require('./model/UserBean'), require('./api/APIsApi'), require('./api/AccessTokensApi'), require('./api/AppsApi'), require('./api/CallsApi'), require('./api/DevelopersApi'), require('./api/MetricsApi'), require('./api/PlansApi'));
  }
}(function(ApiClient, API, APIComponentSimpleBean, APICreateBean, APIResponse, APISimpleBean, APIUserBean, APP, APPResponse, AccessToken, AccessTokenResponse, AppTokenSimpleBean, AuthTokenSimpleBean, CacheMetric, CacheMetricItem, Call, CallResponse, CallsMetric, ChangeLog, ChangeLogBean, DeploymentBean, DeploymentScheduleBean, DeploymentSimpleBean, Developer, EnvironmentSimpleBean, EvironmentUserBean, InterceptorBean, InterceptorReferenceBean, LatencyMetric, OperationBean, OperationHealth, OperationMetric, OperationUrlBean, PlanResponse, PlanSimpleBean, ResourceBean, ResponseEntity, RevisionBean, RevisionSimpleBean, RoleBean, RolePermissionBean, TeamBean, TokensMetric, TopAccessToken, TopApp, UserBean, APIsApi, AccessTokensApi, AppsApi, CallsApi, DevelopersApi, MetricsApi, PlansApi) {
  'use strict';

  /**
   * ERROR_UNKNOWN.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var ApiManagerPortal = require('index'); // See note below*.
   * var xxxSvc = new ApiManagerPortal.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new ApiManagerPortal.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new ApiManagerPortal.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new ApiManagerPortal.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 2.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The API model constructor.
     * @property {module:model/API}
     */
    API: API,
    /**
     * The APIComponentSimpleBean model constructor.
     * @property {module:model/APIComponentSimpleBean}
     */
    APIComponentSimpleBean: APIComponentSimpleBean,
    /**
     * The APICreateBean model constructor.
     * @property {module:model/APICreateBean}
     */
    APICreateBean: APICreateBean,
    /**
     * The APIResponse model constructor.
     * @property {module:model/APIResponse}
     */
    APIResponse: APIResponse,
    /**
     * The APISimpleBean model constructor.
     * @property {module:model/APISimpleBean}
     */
    APISimpleBean: APISimpleBean,
    /**
     * The APIUserBean model constructor.
     * @property {module:model/APIUserBean}
     */
    APIUserBean: APIUserBean,
    /**
     * The APP model constructor.
     * @property {module:model/APP}
     */
    APP: APP,
    /**
     * The APPResponse model constructor.
     * @property {module:model/APPResponse}
     */
    APPResponse: APPResponse,
    /**
     * The AccessToken model constructor.
     * @property {module:model/AccessToken}
     */
    AccessToken: AccessToken,
    /**
     * The AccessTokenResponse model constructor.
     * @property {module:model/AccessTokenResponse}
     */
    AccessTokenResponse: AccessTokenResponse,
    /**
     * The AppTokenSimpleBean model constructor.
     * @property {module:model/AppTokenSimpleBean}
     */
    AppTokenSimpleBean: AppTokenSimpleBean,
    /**
     * The AuthTokenSimpleBean model constructor.
     * @property {module:model/AuthTokenSimpleBean}
     */
    AuthTokenSimpleBean: AuthTokenSimpleBean,
    /**
     * The CacheMetric model constructor.
     * @property {module:model/CacheMetric}
     */
    CacheMetric: CacheMetric,
    /**
     * The CacheMetricItem model constructor.
     * @property {module:model/CacheMetricItem}
     */
    CacheMetricItem: CacheMetricItem,
    /**
     * The Call model constructor.
     * @property {module:model/Call}
     */
    Call: Call,
    /**
     * The CallResponse model constructor.
     * @property {module:model/CallResponse}
     */
    CallResponse: CallResponse,
    /**
     * The CallsMetric model constructor.
     * @property {module:model/CallsMetric}
     */
    CallsMetric: CallsMetric,
    /**
     * The ChangeLog model constructor.
     * @property {module:model/ChangeLog}
     */
    ChangeLog: ChangeLog,
    /**
     * The ChangeLogBean model constructor.
     * @property {module:model/ChangeLogBean}
     */
    ChangeLogBean: ChangeLogBean,
    /**
     * The DeploymentBean model constructor.
     * @property {module:model/DeploymentBean}
     */
    DeploymentBean: DeploymentBean,
    /**
     * The DeploymentScheduleBean model constructor.
     * @property {module:model/DeploymentScheduleBean}
     */
    DeploymentScheduleBean: DeploymentScheduleBean,
    /**
     * The DeploymentSimpleBean model constructor.
     * @property {module:model/DeploymentSimpleBean}
     */
    DeploymentSimpleBean: DeploymentSimpleBean,
    /**
     * The Developer model constructor.
     * @property {module:model/Developer}
     */
    Developer: Developer,
    /**
     * The EnvironmentSimpleBean model constructor.
     * @property {module:model/EnvironmentSimpleBean}
     */
    EnvironmentSimpleBean: EnvironmentSimpleBean,
    /**
     * The EvironmentUserBean model constructor.
     * @property {module:model/EvironmentUserBean}
     */
    EvironmentUserBean: EvironmentUserBean,
    /**
     * The InterceptorBean model constructor.
     * @property {module:model/InterceptorBean}
     */
    InterceptorBean: InterceptorBean,
    /**
     * The InterceptorReferenceBean model constructor.
     * @property {module:model/InterceptorReferenceBean}
     */
    InterceptorReferenceBean: InterceptorReferenceBean,
    /**
     * The LatencyMetric model constructor.
     * @property {module:model/LatencyMetric}
     */
    LatencyMetric: LatencyMetric,
    /**
     * The OperationBean model constructor.
     * @property {module:model/OperationBean}
     */
    OperationBean: OperationBean,
    /**
     * The OperationHealth model constructor.
     * @property {module:model/OperationHealth}
     */
    OperationHealth: OperationHealth,
    /**
     * The OperationMetric model constructor.
     * @property {module:model/OperationMetric}
     */
    OperationMetric: OperationMetric,
    /**
     * The OperationUrlBean model constructor.
     * @property {module:model/OperationUrlBean}
     */
    OperationUrlBean: OperationUrlBean,
    /**
     * The PlanResponse model constructor.
     * @property {module:model/PlanResponse}
     */
    PlanResponse: PlanResponse,
    /**
     * The PlanSimpleBean model constructor.
     * @property {module:model/PlanSimpleBean}
     */
    PlanSimpleBean: PlanSimpleBean,
    /**
     * The ResourceBean model constructor.
     * @property {module:model/ResourceBean}
     */
    ResourceBean: ResourceBean,
    /**
     * The ResponseEntity model constructor.
     * @property {module:model/ResponseEntity}
     */
    ResponseEntity: ResponseEntity,
    /**
     * The RevisionBean model constructor.
     * @property {module:model/RevisionBean}
     */
    RevisionBean: RevisionBean,
    /**
     * The RevisionSimpleBean model constructor.
     * @property {module:model/RevisionSimpleBean}
     */
    RevisionSimpleBean: RevisionSimpleBean,
    /**
     * The RoleBean model constructor.
     * @property {module:model/RoleBean}
     */
    RoleBean: RoleBean,
    /**
     * The RolePermissionBean model constructor.
     * @property {module:model/RolePermissionBean}
     */
    RolePermissionBean: RolePermissionBean,
    /**
     * The TeamBean model constructor.
     * @property {module:model/TeamBean}
     */
    TeamBean: TeamBean,
    /**
     * The TokensMetric model constructor.
     * @property {module:model/TokensMetric}
     */
    TokensMetric: TokensMetric,
    /**
     * The TopAccessToken model constructor.
     * @property {module:model/TopAccessToken}
     */
    TopAccessToken: TopAccessToken,
    /**
     * The TopApp model constructor.
     * @property {module:model/TopApp}
     */
    TopApp: TopApp,
    /**
     * The UserBean model constructor.
     * @property {module:model/UserBean}
     */
    UserBean: UserBean,
    /**
     * The APIsApi service constructor.
     * @property {module:api/APIsApi}
     */
    APIsApi: APIsApi,
    /**
     * The AccessTokensApi service constructor.
     * @property {module:api/AccessTokensApi}
     */
    AccessTokensApi: AccessTokensApi,
    /**
     * The AppsApi service constructor.
     * @property {module:api/AppsApi}
     */
    AppsApi: AppsApi,
    /**
     * The CallsApi service constructor.
     * @property {module:api/CallsApi}
     */
    CallsApi: CallsApi,
    /**
     * The DevelopersApi service constructor.
     * @property {module:api/DevelopersApi}
     */
    DevelopersApi: DevelopersApi,
    /**
     * The MetricsApi service constructor.
     * @property {module:api/MetricsApi}
     */
    MetricsApi: MetricsApi,
    /**
     * The PlansApi service constructor.
     * @property {module:api/PlansApi}
     */
    PlansApi: PlansApi
  };

  return exports;
}));
